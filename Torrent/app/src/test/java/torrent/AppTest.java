/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package torrent;

import org.junit.jupiter.api.Test;

import TorrentClient.TorrentClient;
import TorrentClientServer.TorrentClientServer;
import TorrentServer.TorrentServer;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;

class AppTest {
    @Test 
    void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test 
    void clientServerSwapping() {
        String testTorrentFilename = "Soldier.wav";

        Path serverPathToTorrentRes = Path.of(System.getProperty("user.dir"), "server", testTorrentFilename);
        Path clientPathToTorrentRes = Path.of(System.getProperty("user.dir"), "client", testTorrentFilename);
        // Требуем существования в рабочей директории эталонного исходного файла.
        Path originPathToTorrentRes = Path.of(System.getProperty("user.dir"), testTorrentFilename);

        // Копируем эталонный файл целиком в рабочую директорию сервера. 
        try {
            Files.copy(originPathToTorrentRes, serverPathToTorrentRes, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            fail(e.getMessage(), e);
        }
    
        // Удаляем файл из директории клиента, чтобы результаты прошлых запусков теста не влияли на результаты текущего.
        clientPathToTorrentRes.toFile().delete();

        TorrentServer server = new TorrentServer(1704, 10 * 1000, 10 * 1000);
        server.setWorkingDirectoryName("server");
        TorrentClient client = new TorrentClient("Soldier.torrent");
        client.setWorkingDirectoryName("client");
        client.addPeer("127.0.0.1", 1704);

        Thread serverThread = new Thread(server);
        Thread clientThread = new Thread(client);
    
        serverThread.start();
        try {
            clientThread.start();
            clientThread.join();
            serverThread.join();        
        } catch (InterruptedException e) {
            e.printStackTrace();
            fail(e.getMessage(), e);
            return;
        }

        try {
            assertEquals(Files.mismatch(originPathToTorrentRes, clientPathToTorrentRes), -1);
            assertEquals(Files.mismatch(serverPathToTorrentRes, clientPathToTorrentRes), -1);
        } catch (IOException e) {
            fail(e.getMessage(), e);
            return;
        }
    }

    @Test
    void collectTwoDisjointParts() {
        // По работе с целевым торрент файлом Soldier.torrent поднимаются два юзера (и клиент, и сервер).
        // Утилитами head и tail разделен оборачиваемый файл.
        String torrentFileName = "Soldier.torrent";
        
        TorrentClientServer user1 = new TorrentClientServer("user1.properties", torrentFileName);
        TorrentClientServer user2 = new TorrentClientServer("user2.properties", torrentFileName);

        Path srcPath = Path.of(System.getProperty("user.dir"), "Soldier.wav");
        Path resPath1 = Path.of(user1.getClientWorkingDirectory(), "Soldier.wav");
        Path resPath2 = Path.of(user2.getClientWorkingDirectory(), "Soldier.wav");

        System.out.println(srcPath);
        System.out.println(resPath1);
        System.out.println(resPath2);

        Thread user1Thread = new Thread(user1);
        Thread user2Thread = new Thread(user2);

        try {
            user1Thread.start();
            user2Thread.start();
            user1Thread.join();
            user2Thread.join();    
        } catch(InterruptedException e) {
            fail(torrentFileName, e);
        }

        try {
            assertEquals(Files.mismatch(srcPath, resPath1), -1);
            assertEquals(Files.mismatch(srcPath, resPath2), -1);
        } catch (IOException e) {
            fail(e.getMessage(), e);
            return;
        }
    }

    @Test
    void collectTwoDisjointPartsWithThirdUser() {
        // По работе с целевым торрент файлом Soldier.torrent поднимаются два юзера (и клиент, и сервер).
        // Утилитами head и tail разделен оборачиваемый файл.
        String torrentFileName = "Soldier.torrent";
        
        TorrentClientServer user1 = new TorrentClientServer("user1.properties", torrentFileName);
        TorrentClientServer user2 = new TorrentClientServer("user2.properties", torrentFileName);
        TorrentClientServer user3 = new TorrentClientServer("user3.properties", torrentFileName);

        Path srcPath = Path.of(System.getProperty("user.dir"), "Soldier.wav");
        Path resPath1 = Path.of(user1.getClientWorkingDirectory(), "Soldier.wav");
        Path resPath2 = Path.of(user2.getClientWorkingDirectory(), "Soldier.wav");
        Path resPath3 = Path.of(user3.getClientWorkingDirectory(), "Soldier.wav");

        System.out.println(srcPath);
        System.out.println(resPath1);
        System.out.println(resPath2);
        System.out.println(resPath3);

        Thread user1Thread = new Thread(user1);
        Thread user2Thread = new Thread(user2);
        Thread user3Thread = new Thread(user3);

        try {
            user1Thread.start();
            user2Thread.start();
            user3Thread.start();
            user1Thread.join();
            user2Thread.join();    
            user3Thread.join();    
        } catch(InterruptedException e) {
            fail(torrentFileName, e);
        }

        try {
            assertEquals(Files.mismatch(srcPath, resPath1), -1);
            assertEquals(Files.mismatch(srcPath, resPath2), -1);
            assertEquals(Files.mismatch(srcPath, resPath3), -1);
        } catch (IOException e) {
            fail(e.getMessage(), e);
            return;
        }
    }

}
